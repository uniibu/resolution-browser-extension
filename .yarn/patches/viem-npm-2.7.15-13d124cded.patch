diff --git a/_esm/actions/public/call.js b/_esm/actions/public/call.js
index 8639174e892a8101367d56e1626feaa55198bd1f..907a0c60cb55d78bc880512e88b14736d2f68d3f 100644
--- a/_esm/actions/public/call.js
+++ b/_esm/actions/public/call.js
@@ -1,3 +1,4 @@
+import { offchainLookup, offchainLookupSignature } from '../../utils/ccip.js';
 import { parseAccount, } from '../../accounts/utils/parseAccount.js';
 import { multicall3Abi } from '../../constants/abis.js';
 import { aggregate3Signature } from '../../constants/contract.js';
@@ -92,7 +93,6 @@ export async function call(client, args) {
     }
     catch (err) {
         const data = getRevertErrorData(err);
-        const { offchainLookup, offchainLookupSignature } = await import('../../utils/ccip.js');
         if (data?.slice(0, 10) === offchainLookupSignature && to) {
             return { data: await offchainLookup(client, { data, to }) };
         }
diff --git a/_esm/utils/signature/recoverPublicKey.js b/_esm/utils/signature/recoverPublicKey.js
index 76f72cfe7599f5b920c0ddad9f8a445c08b9fcee..e9104c3a3d8082d7509ea817b117df96225dd784 100644
--- a/_esm/utils/signature/recoverPublicKey.js
+++ b/_esm/utils/signature/recoverPublicKey.js
@@ -1,6 +1,8 @@
 import { isHex } from '../data/isHex.js';
 import { hexToNumber } from '../encoding/fromHex.js';
 import { toHex } from '../encoding/toHex.js';
+import { secp256k1 } from '@noble/curves/secp256k1';
+
 export async function recoverPublicKey({ hash, signature, }) {
     const signatureHex = isHex(signature) ? signature : toHex(signature);
     const hashHex = isHex(hash) ? hash : toHex(hash);
@@ -9,7 +11,6 @@ export async function recoverPublicKey({ hash, signature, }) {
     let v = hexToNumber(`0x${signatureHex.slice(130)}`);
     if (v === 0 || v === 1)
         v += 27;
-    const { secp256k1 } = await import('@noble/curves/secp256k1');
     const publicKey = secp256k1.Signature.fromCompact(signatureHex.substring(2, 130))
         .addRecoveryBit(v - 27)
         .recoverPublicKey(hashHex.substring(2))
